{"version":3,"sources":["iife-start.js","assets/globalized-loader.js","orbit-common/jsonapi-serializer.js","orbit-common/jsonapi-source.js","globalize-orbit-common-jsonapi.js","iife-stop.js"],"sourcesContent":["(function() {\n","// Share loader properties from globalized Orbit package\nvar define = window.Orbit.__define__;\nvar requireModule = window.Orbit.__requireModule__;\n","define('orbit-common/jsonapi-serializer', ['exports', 'orbit-common/serializer', 'orbit/lib/objects'], function (exports, Serializer, objects) {\n\n  'use strict';\n\n  var JSONAPISerializer = Serializer['default'].extend({\n    resourceKey: function(type) {\n      return 'id';\n    },\n\n    resourceType: function(type) {\n      return this.schema.pluralize(type);\n    },\n\n    resourceLink: function(type, link) {\n      return link;\n    },\n\n    resourceAttr: function(type, attr) {\n      return attr;\n    },\n\n    typeFromResourceType: function(resourceType) {\n      return this.schema.singularize(resourceType);\n    },\n\n    resourceId: function(type, id) {\n      if (objects.isArray(id)) {\n        var ids = [];\n        for (var i = 0, l = id.length; i < l; i++) {\n          ids.push(this.resourceId(type, id[i]));\n        }\n\n        return ids;\n      }\n\n      var primaryKey = this.schema.models[type].primaryKey.name;\n      var resourceKey = this.resourceKey(type);\n\n      if (objects.isObject(id)) {\n        if (id[resourceKey]) {\n          return id[resourceKey];\n        }\n        id = id[primaryKey];\n      }\n\n      if (resourceKey === primaryKey) {\n        return id;\n      } else {\n        return this.schema.primaryToSecondaryKey(type, resourceKey, id);\n      }\n    },\n\n    idFromResourceId: function(type, resourceId) {\n      var primaryKey = this.schema.models[type].primaryKey;\n      var pk = primaryKey.name;\n      var rk = this.resourceKey(type);\n\n      if (resourceId !== null && typeof resourceId === 'object') {\n        if (resourceId[pk]) {\n          return resourceId[pk];\n        }\n        resourceId = resourceId[rk];\n      }\n\n      var id;\n\n      if (rk === pk) {\n        id = resourceId;\n      } else {\n        id = this.schema.secondaryToPrimaryKey(type, rk, resourceId, true);\n      }\n\n      return id;\n    },\n\n    serialize: function(type, records) {\n      var json = {},\n          resourceType = this.resourceType(type);\n\n      if (objects.isArray(records)) {\n        json[resourceType] = this.serializeRecords(type, records);\n      } else {\n        json[resourceType] = this.serializeRecord(type, records);\n      }\n\n      return json;\n    },\n\n    serializeRecords: function(type, records) {\n      var json = [];\n\n      records.forEach(function(record) {\n        json.push(this.serializeRecord(type, record));\n      }, this);\n\n      return json;\n    },\n\n    serializeRecord: function(type, record) {\n      var json = {};\n\n      this.serializeKeys(type, record, json);\n      this.serializeAttributes(type, record, json);\n      this.serializeLinks(type, record, json);\n\n      return json;\n    },\n\n    serializeKeys: function(type, record, json) {\n      var modelSchema = this.schema.models[type];\n      var resourceKey = this.resourceKey(type);\n      var value = record[resourceKey];\n\n      if (value) {\n        json[resourceKey] = value;\n      }\n    },\n\n    serializeAttributes: function(type, record, json) {\n      var modelSchema = this.schema.models[type];\n\n      Object.keys(modelSchema.attributes).forEach(function(attr) {\n        this.serializeAttribute(type, record, attr, json);\n      }, this);\n    },\n\n    serializeAttribute: function(type, record, attr, json) {\n      json[this.resourceAttr(type, attr)] = record[attr];\n    },\n\n    serializeLinks: function(type, record, json) {\n      var modelSchema = this.schema.models[type];\n      var linkNames = Object.keys(modelSchema.links);\n\n      if (linkNames.length > 0) {\n        json.links = {};\n\n        linkNames.forEach(function (link) {\n          var linkDef = modelSchema.links[link];\n          var value = record.__rel[link];\n\n          if (linkDef.type === 'hasMany') {\n            value = Object.keys(value);\n          }\n\n          json.links[link] = value;\n\n        }, this);\n      }\n    },\n\n    deserialize: function(type, id, data) {\n      var records = {};\n      var schema = this.schema;\n      var resourceType = this.resourceType(type);\n      var primaryData = data[resourceType];\n\n      if (objects.isArray(primaryData)) {\n        records[type] = this.deserializeRecords(type, id, primaryData);\n      } else {\n        records[type] = this.deserializeRecord(type, id, primaryData);\n      }\n\n      var linkedData = data.linked;\n\n      if (linkedData) {\n        var relType;\n        var relKey;\n        var relData;\n\n        records.linked = {};\n\n        Object.keys(linkedData).forEach(function(linkedResourceType) {\n          relType = this.typeFromResourceType(linkedResourceType);\n          relData = linkedData[linkedResourceType];\n          records.linked[relType] = this.deserializeRecords(relType, null, relData);\n        }, this);\n      }\n\n      this.assignLinks(type, records);\n\n      return records;\n    },\n\n    deserializeLink: function(type, data) {\n      var resourceType = this.resourceType(type);\n      return data[resourceType];\n    },\n\n    deserializeRecords: function(type, ids, data) {\n      var records = [];\n\n      data.forEach(function(recordData, i) {\n        var id = ids && ids[i] ? ids[i] : null;\n\n        records.push(this.deserializeRecord(type, id, recordData));\n      }, this);\n\n      return records;\n    },\n\n    deserializeRecord: function(type, id, data) {\n      if (id) {\n        data[this.schema.models[type].primaryKey.name] = id;\n      }\n      return this.schema.normalize(type, data);\n    },\n\n    assignLinks: function(type, data) {\n      var primaryData = data[type];\n      var linkedData = data.linked;\n\n      if (objects.isArray(primaryData)) {\n        this.assignLinksToRecords(type, primaryData);\n      } else {\n        this.assignLinksToRecord(type, primaryData);\n      }\n\n      if (linkedData) {\n        Object.keys(linkedData).forEach(function(linkedType) {\n          this.assignLinksToRecords(linkedType, linkedData[linkedType]);\n        }, this);\n      }\n    },\n\n    assignLinksToRecords: function(model, records) {\n      records.forEach(function(record) {\n        this.assignLinksToRecord(model, record);\n      }, this);\n    },\n\n    assignLinksToRecord: function(model, record) {\n      if (record.links) {\n        record.__meta.links = record.__meta.links || {};\n\n        var meta = record.__meta.links;\n        var schema = this.schema;\n        var linkSchema;\n        var linkValue;\n        var id;\n\n        Object.keys(record.links).forEach(function(link) {\n          linkValue = record.links[link];\n          linkSchema = schema.models[model].links[link];\n\n          if (!linkSchema) return;\n\n          if (linkSchema.type === 'hasMany' && objects.isArray(linkValue)) {\n            record.__rel[link] = record.__rel[link] || [];\n\n            var rels = record.__rel[link];\n            linkValue.forEach(function(resourceId) {\n              id = this.idFromResourceId(linkSchema.model, resourceId);\n              record.__rel[link][id] = true;\n            }, this);\n\n          } else if (linkSchema.type === 'hasOne' && (typeof linkValue === 'string' || typeof linkValue === 'number')) {\n            id = this.idFromResourceId(linkSchema.model, linkValue);\n            record.__rel[link] = id;\n\n          } else {\n            meta[link] = linkValue;\n          }\n\n        }, this);\n\n        delete record.links;\n      }\n    }\n  });\n\n  exports['default'] = JSONAPISerializer;\n\n});","define('orbit-common/jsonapi-source', ['exports', 'orbit/main', 'orbit/lib/assert', 'orbit/lib/objects', 'orbit/operation', 'orbit-common/source', 'orbit-common/serializer', 'orbit-common/jsonapi-serializer', 'orbit-common/lib/exceptions'], function (exports, Orbit, assert, objects, Operation, Source, Serializer, JSONAPISerializer, exceptions) {\n\n  'use strict';\n\n  var JSONAPISource = Source['default'].extend({\n\n    init: function(schema, options) {\n      assert.assert('JSONAPISource requires Orbit.Promise be defined', Orbit['default'].Promise);\n      assert.assert('JSONAPISource requires Orbit.ajax be defined', Orbit['default'].ajax);\n\n      this._super.apply(this, arguments);\n\n      options = options || {};\n      this.namespace        = options.namespace || this.namespace;\n      this.host             = options.host || this.host;\n      this.headers          = options.headers || this.headers;\n      this.usePatch         = options.usePatch !== undefined ? options.usePatch : this.usePatch;\n      this.SerializerClass  = options.SerializerClass || this.SerializerClass;\n\n      // If `SerializerClass` is obtained through the _super chain, dereference\n      // its wrapped function, which will be the constructor.\n      //\n      // Note: This is only necessary when retrieving a *constructor* from a\n      //       class hierarchy. Otherwise, `superWrapper` \"just works\".\n      if (this.SerializerClass && this.SerializerClass.wrappedFunction) {\n        this.SerializerClass = this.SerializerClass.wrappedFunction;\n      }\n\n      this.serializer = new this.SerializerClass(schema);\n\n      assert.assert('Serializer must be an instance of OC.Serializer', this.serializer instanceof Serializer['default']);\n    },\n\n    namespace: null,\n    host: null,\n    headers: null,\n    SerializerClass: JSONAPISerializer['default'],\n    usePatch: false,\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Transformable interface implementation\n    /////////////////////////////////////////////////////////////////////////////\n\n    _transform: function(operation) {\n      var _this = this;\n      var op    = operation.op;\n      var path  = operation.path;\n\n      if (path.length > 2) {\n        if (path[2] === '__rel') {\n          if (op === 'add') {\n            return _this._transformAddLink(operation);\n          } else if (op === 'remove') {\n            return _this._transformRemoveLink(operation);\n          } else if (op === 'replace') {\n            return _this._transformReplaceLink(operation);\n          }\n        } else {\n          return _this._transformUpdateAttribute(operation);\n        }\n\n      } else if (path.length > 1) {\n        if (op === 'add') {\n          return _this._transformAdd(operation);\n\n        } else if (op === 'replace') {\n          return _this._transformReplace(operation);\n\n        } else if (op === 'remove') {\n          return _this._transformRemove(operation);\n        }\n      }\n\n      throw new exceptions.OperationNotAllowed('JSONAPISource#transform could not process operation: ' + operation.op +\n                                    ' with path: ' + operation.path.join('/'));\n    },\n\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Requestable interface implementation\n    /////////////////////////////////////////////////////////////////////////////\n\n    _find: function(type, id) {\n      if (id && (typeof id === 'number' || typeof id === 'string')) {\n        return this._findOne(type, id);\n\n      } else if (id && objects.isArray(id)) {\n        return this._findMany(type, id);\n\n      } else {\n        var resourceKey = this.serializer.resourceKey(type);\n\n        if (id && typeof id === 'object' && id[resourceKey]) {\n          return this._findOne(type, id);\n\n        } else {\n          return this._findQuery(type, id);\n        }\n      }\n    },\n\n    _findLink: function(type, id, link) {\n      var _this = this;\n      return this.ajax(this.resourceLinkURL(type, id, link), 'GET').then(\n        function(raw) {\n          var linkDef = _this.schema.models[type].links[link];\n          var relId = _this.serializer.deserializeLink(linkDef.model, raw);\n\n          return _this.settleTransforms().then(function() {\n            return relId;\n          });\n        }\n      );\n    },\n\n  // TODO - Override `_findLinked` to use meta-data stored about links\n  //\n  //  _findLinked: function(type, id, link, relId) {\n  //    if (relId === undefined) {\n  //      id = this.getId(type, id);\n  //\n  //      var record = this.retrieve([type, id]);\n  //      if (record) {\n  //        relId = record.__rel[link];\n  //        if (record.__meta.links && record.__meta.links[link]) {\n  //          var linkMeta = record.__meta.links[link];\n  //\n  //          // find linked from meta\n  //        }\n  //      }\n  //    }\n  //\n  //    return this._super.apply(this, arguments);\n  //  },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Internals\n    /////////////////////////////////////////////////////////////////////////////\n\n    _transformAdd: function(operation) {\n      if (this.usePatch) {\n        return this._transformAddWithPatch(operation);\n      } else {\n        return this._transformAddStd(operation);\n      }\n    },\n\n    _transformAddStd: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var json = this.serializer.serialize(type, operation.value);\n\n      return this.ajax(this.resourceURL(type), 'POST', {data: json}).then(\n        function(raw) {\n          _this.deserialize(type, id, raw, operation);\n        }\n      );\n    },\n\n    _transformAddWithPatch: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n\n      var remoteOp = {\n        op: 'add',\n        path: '/-',\n        value: this.serializer.serializeRecord(type, operation.value)\n      };\n\n      return this.ajax(this.resourceURL(type), 'PATCH', {data: [ remoteOp ]}).then(\n        function(raw) {\n          if (raw && objects.isArray(raw)) {\n            _this.deserialize(type, id, raw[0], operation);\n          } else {\n            _this._transformCache(operation);\n          }\n        }\n      );\n    },\n\n    _transformReplace: function(operation) {\n      if (this.usePatch) {\n        return this._transformReplaceWithPatch(operation);\n      } else {\n        return this._transformReplaceStd(operation);\n      }\n    },\n\n    _transformReplaceStd: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var value = operation.value;\n\n      var json = this.serializer.serialize(type, value);\n\n      return this.ajax(this.resourceURL(type, id), 'PUT', {data: json}).then(\n        function(raw) {\n          // TODO - better 204 (no content) checking\n          if (raw && Object.keys(raw).length > 0) {\n            _this.deserialize(type, id, raw, operation);\n          } else {\n            _this._transformCache(operation);\n          }\n        }\n      );\n    },\n\n    _transformReplaceWithPatch: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var value = operation.value;\n\n      var remoteOp = {\n        op: 'replace',\n        path: '/',\n        value: this.serializer.serializeRecord(type, value)\n      };\n\n      return this.ajax(this.resourceURL(type, id), 'PATCH', {data: [ remoteOp ]}).then(\n        function(raw) {\n          if (raw && objects.isArray(raw)) {\n            _this.deserialize(type, id, raw[0], operation);\n          } else {\n            _this._transformCache(operation);\n          }\n        }\n      );\n    },\n\n    _transformRemove: function(operation) {\n      if (this.usePatch) {\n        return this._transformRemoveWithPatch(operation);\n      } else {\n        return this._transformRemoveStd(operation);\n      }\n    },\n\n    _transformRemoveStd: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n\n      return this.ajax(this.resourceURL(type, id), 'DELETE').then(function() {\n        _this._transformCache({op: 'remove', path: [type, id]});\n      });\n    },\n\n    _transformRemoveWithPatch: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n\n      var remoteOp = {\n        op: 'remove',\n        path: '/'\n      };\n\n      return this.ajax(this.resourceURL(type, id), 'PATCH', {data: [ remoteOp ]}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformAddLink: function(operation) {\n      if (this.usePatch) {\n        return this._transformAddLinkWithPatch(operation);\n      } else {\n        return this._transformAddLinkStd(operation);\n      }\n    },\n\n    _transformAddLinkStd: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4] || operation.value;\n\n      var linkDef = this.schema.models[type].links[link];\n      var relType = linkDef.model;\n      var relResourceType = this.serializer.resourceType(relType);\n      var relResourceId = this.serializer.resourceId(relType, relId);\n\n      var method = 'POST';\n      var json = {};\n      json[relResourceType] = relResourceId;\n\n      return this.ajax(this.resourceLinkURL(type, id, link), method, {data: json}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformAddLinkWithPatch: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4] || operation.value;\n      var linkDef = this.schema.models[type].links[link];\n      var relType = linkDef.model;\n      var relResourceId = this.serializer.resourceId(relType, relId);\n      var remoteOp;\n\n      if (linkDef.type === 'hasMany') {\n        remoteOp = {\n          op: 'add',\n          path: '/-',\n          value: relResourceId\n        };\n      } else {\n        remoteOp = {\n          op: 'replace',\n          path: '/',\n          value: relResourceId\n        };\n      }\n\n      return this.ajax(this.resourceLinkURL(type, id, link), 'PATCH', {data: [ remoteOp ]}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformRemoveLink: function(operation) {\n      if (this.usePatch) {\n        return this._transformRemoveLinkWithPatch(operation);\n      } else {\n        return this._transformRemoveLinkStd(operation);\n      }\n    },\n\n    _transformRemoveLinkStd: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4];\n\n      return this.ajax(this.resourceLinkURL(type, id, link, relId), 'DELETE').then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformRemoveLinkWithPatch: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var linkDef = this.schema.models[type].links[link];\n      var remoteOp;\n\n      if (linkDef.type === 'hasMany') {\n        var relId = operation.path[4];\n        var relType = linkDef.model;\n        var relResourceId = this.serializer.resourceId(relType, relId);\n\n        remoteOp = {\n          op: 'remove',\n          path: '/' + relResourceId\n        };\n      } else {\n        remoteOp = {\n          op: 'remove',\n          path: '/'\n        };\n      }\n\n      return this.ajax(this.resourceLinkURL(type, id, link), 'PATCH', {data: [ remoteOp ]}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformReplaceLink: function(operation) {\n      if (this.usePatch) {\n        return this._transformReplaceLinkWithPatch(operation);\n      } else {\n        return this._transformReplaceLinkStd(operation);\n      }\n    },\n\n    _transformReplaceLinkStd: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4] || operation.value;\n\n      // Convert a map of ids to an array\n      if (objects.isObject(relId)) {\n        relId = Object.keys(relId);\n      }\n\n      var linkDef = this.schema.models[type].links[link];\n      var relType = linkDef.model;\n      var relResourceType = this.serializer.resourceType(relType);\n      var relResourceId = this.serializer.resourceId(relType, relId);\n\n      var method = 'PUT';\n      var json = {};\n      json[relResourceType] = relResourceId;\n\n      return this.ajax(this.resourceLinkURL(type, id, link), method, {data: json}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformReplaceLinkWithPatch: function(operation) {\n      var _this = this;\n\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var link = operation.path[3];\n      var relId = operation.path[4] || operation.value;\n\n      // Convert a map of ids to an array\n      if (objects.isObject(relId)) {\n        relId = Object.keys(relId);\n      }\n\n      var linkDef = this.schema.models[type].links[link];\n      var relType = linkDef.model;\n      var relResourceId = this.serializer.resourceId(relType, relId);\n      var remoteOp;\n\n      remoteOp = {\n        op: 'replace',\n        path: '/',\n        value: relResourceId\n      };\n\n      return this.ajax(this.resourceLinkURL(type, id, link), 'PATCH', {data: [ remoteOp ]}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformUpdateAttribute: function(operation) {\n      if (this.usePatch) {\n        return this._transformUpdateAttributeWithPatch(operation);\n      } else {\n        return this._transformUpdateAttributeStd(operation);\n      }\n    },\n\n    _transformUpdateAttributeStd: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var attr = operation.path[2];\n\n      var record = {};\n      record[attr] = operation.value;\n\n      var serialized = {};\n      this.serializer.serializeAttribute(type, record, attr, serialized);\n\n      var json = {};\n      var resourceType = this.serializer.resourceType(type);\n      json[resourceType] = serialized;\n\n      return this.ajax(this.resourceURL(type, id), 'PUT', {data: json}).then(\n        function(raw) {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _transformUpdateAttributeWithPatch: function(operation) {\n      var _this = this;\n      var type = operation.path[0];\n      var id = operation.path[1];\n      var attr = operation.path[2];\n\n      var remoteOp = {\n        op: 'replace',\n        path: '/' + attr,\n        value: operation.value\n      };\n\n      return this.ajax(this.resourceURL(type, id), 'PATCH', {data: [ remoteOp ]}).then(\n        function() {\n          _this._transformCache(operation);\n        }\n      );\n    },\n\n    _addRecordsToCache: function(type, records, parentOperation) {\n      var _this = this;\n      records.forEach(function(record) {\n        _this._addRecordToCache(type, record, parentOperation);\n      });\n    },\n\n    _addRecordToCache: function(type, record, parentOperation) {\n      var operation = {\n        op: 'add',\n        path: [type, this.getId(type, record)],\n        value: record\n      };\n\n      if (parentOperation) operation = parentOperation.spawn(operation);\n\n      this._transformCache(operation);\n    },\n\n    _findOne: function(type, id) {\n      var _this = this;\n      return this.ajax(this.resourceURL(type, id), 'GET').then(\n        function(raw) {\n          var record = _this.deserialize(type, null, raw);\n          return _this.settleTransforms().then(function() {\n            return record;\n          });\n        }\n      );\n    },\n\n    _findMany: function(type, ids) {\n      var _this = this;\n      return this.ajax(this.resourceURL(type, ids), 'GET').then(\n        function(raw) {\n          var records = _this.deserialize(type, null, raw);\n          return _this.settleTransforms().then(function() {\n            return objects.isArray(records) ? records : [records];\n          });\n        }\n      );\n    },\n\n    _findQuery: function(type, query) {\n      var _this = this;\n\n      return this.ajax(this.resourceURL(type), 'GET', {data: query}).then(\n        function(raw) {\n          var records = _this.deserialize(type, null, raw);\n          return _this.settleTransforms().then(function() {\n            return records;\n          });\n        }\n      );\n    },\n\n    _transformCache: function(operation) {\n      var pathToVerify,\n          inverse;\n\n      if (operation.op === 'add') {\n        pathToVerify = operation.path.slice(0, operation.path.length - 1);\n      } else {\n        pathToVerify = operation.path;\n      }\n\n      if (this.retrieve(pathToVerify)) {\n        // transforming the cache will trigger a call to `_cacheDidTransform`,\n        // which will then trigger `didTransform`\n        this._cache.transform(operation);\n\n      } else if (operation.op === 'replace') {\n        // try adding instead of replacing if the cache does not yet contain\n        // the data\n        operation.op = 'add';\n        this._transformCache(operation);\n\n      } else {\n        // if the cache can't be transformed because, still trigger `didTransform`\n        //\n        // NOTE: this is not an error condition, since the local cache will often\n        // be sparsely populated compared with the remote store\n        this.didTransform(operation, []);\n      }\n    },\n\n    _resourceIdURLSegment: function(type, id) {\n      var resourceId = this.serializer.resourceId(type, id);\n      if (objects.isArray(resourceId)) {\n        resourceId = resourceId.join(',');\n      }\n      return resourceId;\n    },\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Publicly accessible methods particular to JSONAPISource\n    /////////////////////////////////////////////////////////////////////////////\n\n    ajax: function(url, method, hash) {\n      var _this = this;\n\n      return new Orbit['default'].Promise(function(resolve, reject) {\n        hash = hash || {};\n        hash.url = url;\n        hash.type = method;\n        hash.dataType = 'json';\n        hash.context = _this;\n\n        // console.log('ajax start', method);\n\n        if (hash.data && method !== 'GET') {\n          // If contentType has not been specified, use the appropriate type\n          // according to the JSON API spec\n          if (!hash.contentType) {\n            if (method === 'PATCH') {\n              hash.contentType = 'application/json-patch+json; charset=utf-8';\n            } else {\n              hash.contentType = 'application/vnd.api+json; charset=utf-8';\n            }\n          }\n          hash.data = JSON.stringify(hash.data);\n        }\n\n        if (_this.ajaxHeaders) {\n          var headers = _this.ajaxHeaders();\n          hash.beforeSend = function (xhr) {\n            for (var key in headers) {\n              if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n              }\n            }\n          };\n        }\n\n        hash.success = function(json) {\n          // console.log('ajax success', method, json);\n          resolve(json);\n        };\n\n        hash.error = function(jqXHR, textStatus, errorThrown) {\n          if (jqXHR) {\n            jqXHR.then = null;\n          }\n          // console.log('ajax error', method, jqXHR);\n\n          reject(jqXHR);\n        };\n\n        Orbit['default'].ajax(hash);\n      });\n    },\n\n    ajaxHeaders: function() {\n      return this.headers;\n    },\n\n    resourceNamespace: function(type) {\n      return this.namespace;\n    },\n\n    resourceHost: function(type) {\n      return this.host;\n    },\n\n    resourcePath: function(type, id) {\n      var path = [this.serializer.resourceType(type)];\n      if (id) {\n        path.push(this._resourceIdURLSegment(type, id));\n      }\n      return path.join('/');\n    },\n\n    resourceURL: function(type, id) {\n      var host = this.resourceHost(type),\n          namespace = this.resourceNamespace(type),\n          url = [];\n\n      if (host) { url.push(host); }\n      if (namespace) { url.push(namespace); }\n      url.push(this.resourcePath(type, id));\n\n      url = url.join('/');\n      if (!host) { url = '/' + url; }\n\n      return url;\n    },\n\n    resourceLinkURL: function(type, id, link, relId) {\n      var url = this.resourceURL(type, id);\n      url += '/links/' + this.serializer.resourceLink(type, link);\n\n      if (relId) {\n        var linkDef = this.schema.models[type].links[link];\n\n        url += '/' + this._resourceIdURLSegment(linkDef.model, relId);\n      }\n\n      return url;\n    },\n\n    deserialize: function(type, id, data, parentOperation) {\n      var deserialized = this.serializer.deserialize(type, id, data);\n      var primaryRecords = deserialized[type];\n\n      // Create a new parent operation, if necessary, to ensure that subsequent\n      // operations are related and will be settled together in the same\n      // transformation.\n      //\n      // Note: this parent operation is not actually performed on this source.\n      // It is only created to establish a common ancestor.\n      if (!parentOperation) {\n        parentOperation = new Operation['default']();\n      }\n\n      if (this._cache) {\n        if (objects.isArray(primaryRecords)) {\n          this._addRecordsToCache(type, primaryRecords, parentOperation);\n        } else {\n          this._addRecordToCache(type, primaryRecords, parentOperation);\n        }\n\n        if (deserialized.linked) {\n          Object.keys(deserialized.linked).forEach(function(relType) {\n            var relRecords = deserialized.linked[relType];\n            this._addRecordsToCache(relType, relRecords, parentOperation);\n          }, this);\n        }\n      }\n\n      return primaryRecords;\n    }\n  });\n\n  exports['default'] = JSONAPISource;\n\n});","window.OC.JSONAPISource = requireModule(\"orbit-common/jsonapi-source\")[\"default\"];\nwindow.OC.JSONAPISerializer = requireModule(\"orbit-common/jsonapi-serializer\")[\"default\"];\n","})();\n"],"names":[],"mappingshpuBA;AACA;;ACDA;","file":"orbit-common-jsonapi.js"}